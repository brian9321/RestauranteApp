import * as ɵngcc0 from '@angular/core';
var IonicStorageModule_1;
import { __awaiter, __decorate } from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { Storage } from '@ionic/storage';
import { isPlatformServer } from '@angular/common';
const StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');
export { StorageConfigToken, Storage };
class NoopStorage extends Storage {
    constructor() {
        super();
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            return this;
        });
    }
    defineDriver() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    get driver() {
        return 'noop';
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () { return null; });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    remove(key) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    length() {
        return __awaiter(this, void 0, void 0, function* () { return 0; });
    }
    keys() {
        return __awaiter(this, void 0, void 0, function* () { return []; });
    }
    forEach(iteratorCallback) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    setEncryptionKey(key) { }
}
export function provideStorage(storageConfig) {
    if (isPlatformServer(this.platformId)) {
        // When running in a server context return the NoopStorage
        return new NoopStorage();
    }
    return new Storage(storageConfig);
}
let IonicStorageModule = IonicStorageModule_1 = class IonicStorageModule {
    static forRoot(storageConfig = null) {
        return {
            ngModule: IonicStorageModule_1,
            providers: [
                { provide: StorageConfigToken, useValue: storageConfig },
                {
                    provide: Storage,
                    useFactory: provideStorage,
                    deps: [StorageConfigToken]
                }
            ]
        };
    }
};
IonicStorageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IonicStorageModule });
IonicStorageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IonicStorageModule_Factory(t) { return new (t || IonicStorageModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IonicStorageModule, [{
        type: NgModule
    }], null, null); })();
export { IonicStorageModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIm5nOi9AaW9uaWMvc3RvcmFnZS1hbmd1bGFyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQW9DLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRixPQUFPLEVBQ0wsT0FBTyxFQUVSLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FDM0Msc0JBQXNCLENBQ3ZCLENBQUM7QUFFRixPQUFPLEVBQWlCLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxDQUFDO0FBRXRELE1BQU0sV0FBWSxTQUFRLE9BQU87QUFDakMsSUFBRTtBQUNGLFFBQUksS0FBSyxFQUFFLENBQUM7QUFDWixJQUFFLENBQUM7QUFDSCxJQUFRLE1BQU07QUFDZDtBQUlZLFlBSlIsT0FBTyxJQUFJLENBQUM7QUFDaEIsUUFBRSxDQUFDO0FBQ0QsS0FEQztBQUNILElBQVEsWUFBWTtBQUNwQjtBQUlHLFFBSkQsQ0FBQztBQUNELEtBREM7QUFDSCxJQUFFLElBQUksTUFBTTtBQUFLLFFBQ2IsT0FBTyxNQUFNLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0gsSUFBUSxHQUFHLENBQUMsR0FBVztBQUFJLDhEQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QyxLQUR1QztBQUN6QyxJQUFRLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBVTtBQUFJLDhEQUFBLENBQUM7QUFDdEMsS0FEc0M7QUFDeEMsSUFBUSxNQUFNLENBQUMsR0FBVztBQUFJLDhEQUFjLENBQUM7QUFDM0MsS0FEMkM7QUFDN0MsSUFBUSxLQUFLO0FBQUssOERBQWUsQ0FBQztBQUNoQyxLQURnQztBQUNsQyxJQUFRLE1BQU07QUFBSyw4REFBaUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLEtBRDZDO0FBQy9DLElBQVEsSUFBSTtBQUFLLDhEQUFBLE9BQU8sRUFBRSxDQUFBLENBQUMsQ0FBQztBQUMxQixLQUQwQjtBQUM1QixJQUFRLE9BQU8sQ0FBQyxnQkFBMkU7QUFBSSw4REFBZSxDQUFDO0FBQzdHLEtBRDZHO0FBQy9HLElBQUUsZ0JBQWdCLENBQUMsR0FBVyxJQUFJLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQzVCLGFBQTRCO0FBQzNCLElBQ0QsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDekMsUUFBSSwwREFBMEQ7QUFDOUQsUUFBSSxPQUFPLElBQUksV0FBVyxFQUFFLENBQUM7QUFDN0IsS0FBRztBQUNILElBQ0UsT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBR0QsSUFBYSxrQkFBa0IsMEJBQS9CLE1BQWEsa0JBQWtCO0FBQy9CLElBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBK0IsSUFBSTtBQUFJLFFBQ3BELE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxvQkFBa0I7QUFDbEMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtBQUNoRSxnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxPQUFPO0FBQzFCLG9CQUFVLFVBQVUsRUFBRSxjQUFjO0FBQ3BDLG9CQUFVLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDO0FBQ3BDLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILENBQUMsQ0FBQTtBQWRZLGtCQUFrQiwyQ0FEOUIsUUFBUSxFQUFFLElBQ0U7WUFBa0IsQ0FjOUI7OzswQkFDRDtBQUFDLFNBZlksa0JBQWtCO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFBMQVRGT1JNX0lELCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBTdG9yYWdlLFxuICBTdG9yYWdlQ29uZmlnXG59IGZyb20gJ0Bpb25pYy9zdG9yYWdlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5jb25zdCBTdG9yYWdlQ29uZmlnVG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48YW55PihcbiAgJ1NUT1JBR0VfQ09ORklHX1RPS0VOJ1xuKTtcblxuZXhwb3J0IHsgU3RvcmFnZUNvbmZpZywgU3RvcmFnZUNvbmZpZ1Rva2VuLCBTdG9yYWdlIH07XG5cbmNsYXNzIE5vb3BTdG9yYWdlIGV4dGVuZHMgU3RvcmFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFzeW5jIGRlZmluZURyaXZlcigpIHtcbiAgfVxuICBnZXQgZHJpdmVyKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiAnbm9vcCc7XG4gIH1cbiAgYXN5bmMgZ2V0KGtleTogc3RyaW5nKSB7IHJldHVybiBudWxsOyB9XG4gIGFzeW5jIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgeyB9XG4gIGFzeW5jIHJlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7IH1cbiAgYXN5bmMgY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7IH1cbiAgYXN5bmMgbGVuZ3RoKCk6IFByb21pc2U8bnVtYmVyPiB7IHJldHVybiAwOyB9XG4gIGFzeW5jIGtleXMoKSB7IHJldHVybiBbXSB9XG4gIGFzeW5jIGZvckVhY2goaXRlcmF0b3JDYWxsYmFjazogKHZhbHVlOiBhbnksIGtleTogc3RyaW5nLCBpdGVyYXRpb25OdW1iZXI6IE51bWJlcikgPT4gYW55KTogUHJvbWlzZTx2b2lkPiB7IH1cbiAgc2V0RW5jcnlwdGlvbktleShrZXk6IHN0cmluZykgeyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlU3RvcmFnZShcbiAgc3RvcmFnZUNvbmZpZzogU3RvcmFnZUNvbmZpZ1xuKTogU3RvcmFnZSB7XG4gIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAvLyBXaGVuIHJ1bm5pbmcgaW4gYSBzZXJ2ZXIgY29udGV4dCByZXR1cm4gdGhlIE5vb3BTdG9yYWdlXG4gICAgcmV0dXJuIG5ldyBOb29wU3RvcmFnZSgpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTdG9yYWdlKHN0b3JhZ2VDb25maWcpO1xufVxuXG5ATmdNb2R1bGUoKVxuZXhwb3J0IGNsYXNzIElvbmljU3RvcmFnZU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KHN0b3JhZ2VDb25maWc6IFN0b3JhZ2VDb25maWcgPSBudWxsKTogTW9kdWxlV2l0aFByb3ZpZGVyczxJb25pY1N0b3JhZ2VNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IElvbmljU3RvcmFnZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IFN0b3JhZ2VDb25maWdUb2tlbiwgdXNlVmFsdWU6IHN0b3JhZ2VDb25maWcgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFN0b3JhZ2UsXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZVN0b3JhZ2UsXG4gICAgICAgICAgZGVwczogW1N0b3JhZ2VDb25maWdUb2tlbl1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==